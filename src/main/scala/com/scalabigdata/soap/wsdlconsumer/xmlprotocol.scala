// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package com.scalabigdata.soap.wsdlconsumer

import scala.concurrent.Future

import com.scalabigdata.soap.scalaxb
import com.scalabigdata.soap.wsdlconsumer


/**
usage:
val obj = scalaxb.fromXML[wsdlconsumer.Foo](node)
val document = scalaxb.toXML[wsdlconsumer.Foo](obj, "foo", wsdlconsumer.defaultScope)
**/
object `package` extends XMLProtocol { }

trait XMLProtocol extends scalaxb.XMLStandardTypes {
  implicit lazy val executionContext = scala.concurrent.ExecutionContext.Implicits.global

  val defaultScope = scalaxb.toScope(None -> "urn:xtk:session",
    Some("tns0") -> "urn:vva:VV2_NOVOS_ENTRANTES",
    Some("tns") -> "urn:xtk:session",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Wsdlconsumer_ElementTypeFormat: scalaxb.XMLFormat[wsdlconsumer.ElementType] = new DefaultWsdlconsumer_ElementTypeFormat {}
  implicit lazy val Wsdlconsumer_NewInstanceFormat: scalaxb.XMLFormat[wsdlconsumer.NewInstance] = new DefaultWsdlconsumer_NewInstanceFormat {}
  implicit lazy val Wsdlconsumer_DuplicateFormat: scalaxb.XMLFormat[wsdlconsumer.Duplicate] = new DefaultWsdlconsumer_DuplicateFormat {}
  implicit lazy val Wsdlconsumer_DuplicateWithMappingIdFormat: scalaxb.XMLFormat[wsdlconsumer.DuplicateWithMappingId] = new DefaultWsdlconsumer_DuplicateWithMappingIdFormat {}
  implicit lazy val Wsdlconsumer_DuplicateToFormat: scalaxb.XMLFormat[wsdlconsumer.DuplicateTo] = new DefaultWsdlconsumer_DuplicateToFormat {}
  implicit lazy val Wsdlconsumer_ApplyDuplicateRulesFormat: scalaxb.XMLFormat[wsdlconsumer.ApplyDuplicateRules] = new DefaultWsdlconsumer_ApplyDuplicateRulesFormat {}
  implicit lazy val Wsdlconsumer_SetDefaultsFormat: scalaxb.XMLFormat[wsdlconsumer.SetDefaults] = new DefaultWsdlconsumer_SetDefaultsFormat {}
  implicit lazy val Wsdlconsumer_SetDefaultValuesFormat: scalaxb.XMLFormat[wsdlconsumer.SetDefaultValues] = new DefaultWsdlconsumer_SetDefaultValuesFormat {}
  implicit lazy val Wsdlconsumer_LoadFormat: scalaxb.XMLFormat[wsdlconsumer.Load] = new DefaultWsdlconsumer_LoadFormat {}
  implicit lazy val Wsdlconsumer_LoadIfExistsFormat: scalaxb.XMLFormat[wsdlconsumer.LoadIfExists] = new DefaultWsdlconsumer_LoadIfExistsFormat {}
  implicit lazy val Wsdlconsumer_LoadAsTextFormat: scalaxb.XMLFormat[wsdlconsumer.LoadAsText] = new DefaultWsdlconsumer_LoadAsTextFormat {}
  implicit lazy val Wsdlconsumer_LoadAsTextResponseFormat: scalaxb.XMLFormat[wsdlconsumer.LoadAsTextResponse] = new DefaultWsdlconsumer_LoadAsTextResponseFormat {}
  implicit lazy val Wsdlconsumer_RemoveFormat: scalaxb.XMLFormat[wsdlconsumer.Remove] = new DefaultWsdlconsumer_RemoveFormat {}
  implicit lazy val Wsdlconsumer_GetPkListFormat: scalaxb.XMLFormat[wsdlconsumer.GetPkList] = new DefaultWsdlconsumer_GetPkListFormat {}
  implicit lazy val Wsdlconsumer_GetPkListResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetPkListResponse] = new DefaultWsdlconsumer_GetPkListResponseFormat {}
  implicit lazy val Wsdlconsumer_WriteFormat: scalaxb.XMLFormat[wsdlconsumer.Write] = new DefaultWsdlconsumer_WriteFormat {}
  implicit lazy val Wsdlconsumer_WriteResponseFormat: scalaxb.XMLFormat[wsdlconsumer.WriteResponse] = new DefaultWsdlconsumer_WriteResponseFormat {}
  implicit lazy val Wsdlconsumer_WriteCollectionFormat: scalaxb.XMLFormat[wsdlconsumer.WriteCollection] = new DefaultWsdlconsumer_WriteCollectionFormat {}
  implicit lazy val Wsdlconsumer_WriteCollectionResponseFormat: scalaxb.XMLFormat[wsdlconsumer.WriteCollectionResponse] = new DefaultWsdlconsumer_WriteCollectionResponseFormat {}
  implicit lazy val Wsdlconsumer_DeleteCollectionFormat: scalaxb.XMLFormat[wsdlconsumer.DeleteCollection] = new DefaultWsdlconsumer_DeleteCollectionFormat {}
  implicit lazy val Wsdlconsumer_DeleteCollectionResponseFormat: scalaxb.XMLFormat[wsdlconsumer.DeleteCollectionResponse] = new DefaultWsdlconsumer_DeleteCollectionResponseFormat {}
  implicit lazy val Wsdlconsumer_ImportCollectionFormat: scalaxb.XMLFormat[wsdlconsumer.ImportCollection] = new DefaultWsdlconsumer_ImportCollectionFormat {}
  implicit lazy val Wsdlconsumer_ImportCollectionResponseFormat: scalaxb.XMLFormat[wsdlconsumer.ImportCollectionResponse] = new DefaultWsdlconsumer_ImportCollectionResponseFormat {}
  implicit lazy val Wsdlconsumer_GetImagesFormat: scalaxb.XMLFormat[wsdlconsumer.GetImages] = new DefaultWsdlconsumer_GetImagesFormat {}
  implicit lazy val Wsdlconsumer_GetImagesResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetImagesResponse] = new DefaultWsdlconsumer_GetImagesResponseFormat {}
  implicit lazy val Wsdlconsumer_GetEntityIfMoreRecentFormat: scalaxb.XMLFormat[wsdlconsumer.GetEntityIfMoreRecent] = new DefaultWsdlconsumer_GetEntityIfMoreRecentFormat {}
  implicit lazy val Wsdlconsumer_GetEntityIfMoreRecentResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetEntityIfMoreRecentResponse] = new DefaultWsdlconsumer_GetEntityIfMoreRecentResponseFormat {}
  implicit lazy val Wsdlconsumer_GetDirtyCacheEntitiesFormat: scalaxb.XMLFormat[wsdlconsumer.GetDirtyCacheEntities] = new DefaultWsdlconsumer_GetDirtyCacheEntitiesFormat {}
  implicit lazy val Wsdlconsumer_GetDirtyCacheEntitiesResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetDirtyCacheEntitiesResponse] = new DefaultWsdlconsumer_GetDirtyCacheEntitiesResponseFormat {}
  implicit lazy val Wsdlconsumer_GetActiveApplicationMenusFormat: scalaxb.XMLFormat[wsdlconsumer.GetActiveApplicationMenus] = new DefaultWsdlconsumer_GetActiveApplicationMenusFormat {}
  implicit lazy val Wsdlconsumer_GetActiveApplicationMenusResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetActiveApplicationMenusResponse] = new DefaultWsdlconsumer_GetActiveApplicationMenusResponseFormat {}
  implicit lazy val Wsdlconsumer_GetDefaultEntityFormat: scalaxb.XMLFormat[wsdlconsumer.GetDefaultEntity] = new DefaultWsdlconsumer_GetDefaultEntityFormat {}
  implicit lazy val Wsdlconsumer_GetDefaultEntityResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetDefaultEntityResponse] = new DefaultWsdlconsumer_GetDefaultEntityResponseFormat {}
  implicit lazy val Wsdlconsumer_LogonFormat: scalaxb.XMLFormat[wsdlconsumer.Logon] = new DefaultWsdlconsumer_LogonFormat {}
  implicit lazy val Wsdlconsumer_LogonResponseFormat: scalaxb.XMLFormat[wsdlconsumer.LogonResponse] = new DefaultWsdlconsumer_LogonResponseFormat {}
  implicit lazy val Wsdlconsumer_BearerTokenLogonFormat: scalaxb.XMLFormat[wsdlconsumer.BearerTokenLogon] = new DefaultWsdlconsumer_BearerTokenLogonFormat {}
  implicit lazy val Wsdlconsumer_BearerTokenLogonResponseFormat: scalaxb.XMLFormat[wsdlconsumer.BearerTokenLogonResponse] = new DefaultWsdlconsumer_BearerTokenLogonResponseFormat {}
  implicit lazy val Wsdlconsumer_GetUserInfoFormat: scalaxb.XMLFormat[wsdlconsumer.GetUserInfo] = new DefaultWsdlconsumer_GetUserInfoFormat {}
  implicit lazy val Wsdlconsumer_GetUserInfoResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetUserInfoResponse] = new DefaultWsdlconsumer_GetUserInfoResponseFormat {}
  implicit lazy val Wsdlconsumer_LogoffFormat: scalaxb.XMLFormat[wsdlconsumer.Logoff] = new DefaultWsdlconsumer_LogoffFormat {}
  implicit lazy val Wsdlconsumer_LogoffResponseFormat: scalaxb.XMLFormat[wsdlconsumer.LogoffResponse] = new DefaultWsdlconsumer_LogoffResponseFormat {}
  implicit lazy val Wsdlconsumer_KillSessionFormat: scalaxb.XMLFormat[wsdlconsumer.KillSession] = new DefaultWsdlconsumer_KillSessionFormat {}
  implicit lazy val Wsdlconsumer_KillSessionResponseFormat: scalaxb.XMLFormat[wsdlconsumer.KillSessionResponse] = new DefaultWsdlconsumer_KillSessionResponseFormat {}
  implicit lazy val Wsdlconsumer_TestCnxFormat: scalaxb.XMLFormat[wsdlconsumer.TestCnx] = new DefaultWsdlconsumer_TestCnxFormat {}
  implicit lazy val Wsdlconsumer_TestCnxResponseFormat: scalaxb.XMLFormat[wsdlconsumer.TestCnxResponse] = new DefaultWsdlconsumer_TestCnxResponseFormat {}
  implicit lazy val Wsdlconsumer_ChangePasswordFormat: scalaxb.XMLFormat[wsdlconsumer.ChangePassword] = new DefaultWsdlconsumer_ChangePasswordFormat {}
  implicit lazy val Wsdlconsumer_ChangePasswordResponseFormat: scalaxb.XMLFormat[wsdlconsumer.ChangePasswordResponse] = new DefaultWsdlconsumer_ChangePasswordResponseFormat {}
  implicit lazy val Wsdlconsumer_GetServerTimeFormat: scalaxb.XMLFormat[wsdlconsumer.GetServerTime] = new DefaultWsdlconsumer_GetServerTimeFormat {}
  implicit lazy val Wsdlconsumer_GetServerTimeResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetServerTimeResponse] = new DefaultWsdlconsumer_GetServerTimeResponseFormat {}
  implicit lazy val Wsdlconsumer_ServerShutdownFormat: scalaxb.XMLFormat[wsdlconsumer.ServerShutdown] = new DefaultWsdlconsumer_ServerShutdownFormat {}
  implicit lazy val Wsdlconsumer_ServerShutdownResponseFormat: scalaxb.XMLFormat[wsdlconsumer.ServerShutdownResponse] = new DefaultWsdlconsumer_ServerShutdownResponseFormat {}
  implicit lazy val Wsdlconsumer_GetOptionFormat: scalaxb.XMLFormat[wsdlconsumer.GetOption] = new DefaultWsdlconsumer_GetOptionFormat {}
  implicit lazy val Wsdlconsumer_GetOptionResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetOptionResponse] = new DefaultWsdlconsumer_GetOptionResponseFormat {}
  implicit lazy val Wsdlconsumer_GetNewIdsFormat: scalaxb.XMLFormat[wsdlconsumer.GetNewIds] = new DefaultWsdlconsumer_GetNewIdsFormat {}
  implicit lazy val Wsdlconsumer_GetNewIdsResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetNewIdsResponse] = new DefaultWsdlconsumer_GetNewIdsResponseFormat {}
  implicit lazy val Wsdlconsumer_GetNewIdsExFormat: scalaxb.XMLFormat[wsdlconsumer.GetNewIdsEx] = new DefaultWsdlconsumer_GetNewIdsExFormat {}
  implicit lazy val Wsdlconsumer_GetNewIdsExResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetNewIdsExResponse] = new DefaultWsdlconsumer_GetNewIdsExResponseFormat {}
  implicit lazy val Wsdlconsumer_GetCnxInfoFormat: scalaxb.XMLFormat[wsdlconsumer.GetCnxInfo] = new DefaultWsdlconsumer_GetCnxInfoFormat {}
  implicit lazy val Wsdlconsumer_GetCnxInfoResponseFormat: scalaxb.XMLFormat[wsdlconsumer.GetCnxInfoResponse] = new DefaultWsdlconsumer_GetCnxInfoResponseFormat {}
  implicit lazy val Wsdlconsumer_FormatDataPolicyFormat: scalaxb.XMLFormat[wsdlconsumer.FormatDataPolicy] = new DefaultWsdlconsumer_FormatDataPolicyFormat {}
  implicit lazy val Wsdlconsumer_FormatDataPolicyResponseFormat: scalaxb.XMLFormat[wsdlconsumer.FormatDataPolicyResponse] = new DefaultWsdlconsumer_FormatDataPolicyResponseFormat {}
  implicit lazy val Wsdlconsumer_EncryptFormat: scalaxb.XMLFormat[wsdlconsumer.Encrypt] = new DefaultWsdlconsumer_EncryptFormat {}
  implicit lazy val Wsdlconsumer_EncryptResponseFormat: scalaxb.XMLFormat[wsdlconsumer.EncryptResponse] = new DefaultWsdlconsumer_EncryptResponseFormat {}
  implicit lazy val Wsdlconsumer_EncryptServerPasswordFormat: scalaxb.XMLFormat[wsdlconsumer.EncryptServerPassword] = new DefaultWsdlconsumer_EncryptServerPasswordFormat {}
  implicit lazy val Wsdlconsumer_EncryptServerPasswordResponseFormat: scalaxb.XMLFormat[wsdlconsumer.EncryptServerPasswordResponse] = new DefaultWsdlconsumer_EncryptServerPasswordResponseFormat {}
  implicit lazy val Wsdlconsumer_HashPasswordFormat: scalaxb.XMLFormat[wsdlconsumer.HashPassword] = new DefaultWsdlconsumer_HashPasswordFormat {}
  implicit lazy val Wsdlconsumer_HashPasswordResponseFormat: scalaxb.XMLFormat[wsdlconsumer.HashPasswordResponse] = new DefaultWsdlconsumer_HashPasswordResponseFormat {}
  implicit lazy val Wsdlconsumer_DiffFormat: scalaxb.XMLFormat[wsdlconsumer.Diff] = new DefaultWsdlconsumer_DiffFormat {}
  implicit lazy val Wsdlconsumer_DiffResponseFormat: scalaxb.XMLFormat[wsdlconsumer.DiffResponse] = new DefaultWsdlconsumer_DiffResponseFormat {}
  implicit lazy val Wsdlconsumer_ElementFormat: scalaxb.XMLFormat[wsdlconsumer.Element] = new DefaultWsdlconsumer_ElementFormat {}
  implicit lazy val Wsdlconsumer_CreateFormat: scalaxb.XMLFormat[wsdlconsumer.Create] = new DefaultWsdlconsumer_CreateFormat {}
  implicit lazy val Wsdlconsumer_CreateResponseFormat: scalaxb.XMLFormat[wsdlconsumer.CreateResponse] = new DefaultWsdlconsumer_CreateResponseFormat {}
  implicit lazy val Wsdlconsumer_CreateCollectionFormat: scalaxb.XMLFormat[wsdlconsumer.CreateCollection] = new DefaultWsdlconsumer_CreateCollectionFormat {}
  implicit lazy val Wsdlconsumer_CreateCollectionResponseFormat: scalaxb.XMLFormat[wsdlconsumer.CreateCollectionResponse] = new DefaultWsdlconsumer_CreateCollectionResponseFormat {}


  implicit val fromAnySchemaType: scala.xml.Elem => Option[scalaxb.DataRecord[Any]] = {elem =>
    import scalaxb.{Helper, DataRecord, fromXML}

    val ns = Helper.nullOrEmpty(elem.scope.getURI(elem.prefix))
    val key = Some(elem.label)
    val (xsns, xstype) = Helper.instanceType(elem)

    (key, ns) match {
      case (Some("DiffResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.DiffResponse](elem)))
      case (Some("HashPasswordResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.HashPasswordResponse](elem)))
      case (Some("EncryptServerPasswordResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.EncryptServerPasswordResponse](elem)))
      case (Some("EncryptResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.EncryptResponse](elem)))
      case (Some("FormatDataPolicyResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.FormatDataPolicyResponse](elem)))
      case (Some("GetCnxInfoResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetCnxInfoResponse](elem)))
      case (Some("GetNewIdsExResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetNewIdsExResponse](elem)))
      case (Some("GetNewIdsResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetNewIdsResponse](elem)))
      case (Some("GetOptionResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetOptionResponse](elem)))
      case (Some("ServerShutdownResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ServerShutdownResponse](elem)))
      case (Some("GetServerTimeResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetServerTimeResponse](elem)))
      case (Some("ChangePasswordResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ChangePasswordResponse](elem)))
      case (Some("TestCnxResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.TestCnxResponse](elem)))
      case (Some("KillSessionResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.KillSessionResponse](elem)))
      case (Some("LogoffResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.LogoffResponse](elem)))
      case (Some("GetUserInfoResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetUserInfoResponse](elem)))
      case (Some("BearerTokenLogonResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.BearerTokenLogonResponse](elem)))
      case (Some("LogonResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.LogonResponse](elem)))
      case (Some("GetDefaultEntityResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetDefaultEntityResponse](elem)))
      case (Some("GetActiveApplicationMenusResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetActiveApplicationMenusResponse](elem)))
      case (Some("GetDirtyCacheEntitiesResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetDirtyCacheEntitiesResponse](elem)))
      case (Some("GetEntityIfMoreRecentResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetEntityIfMoreRecentResponse](elem)))
      case (Some("GetImagesResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetImagesResponse](elem)))
      case (Some("ImportCollectionResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ImportCollectionResponse](elem)))
      case (Some("DeleteCollectionResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.DeleteCollectionResponse](elem)))
      case (Some("WriteCollectionResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.WriteCollectionResponse](elem)))
      case (Some("WriteResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.WriteResponse](elem)))
      case (Some("GetPkListResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetPkListResponse](elem)))
      case (Some("RemoveResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("LoadAsTextResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.LoadAsTextResponse](elem)))
      case (Some("LoadIfExistsResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("LoadResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("SetDefaultValuesResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("SetDefaultsResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("ApplyDuplicateRulesResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("DuplicateToResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("DuplicateWithMappingIdResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("DuplicateResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("NewInstanceResponse"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ElementType](elem)))
      case (Some("NewInstance"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.NewInstance](elem)))
      case (Some("Duplicate"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Duplicate](elem)))
      case (Some("DuplicateWithMappingId"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.DuplicateWithMappingId](elem)))
      case (Some("DuplicateTo"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.DuplicateTo](elem)))
      case (Some("ApplyDuplicateRules"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ApplyDuplicateRules](elem)))
      case (Some("SetDefaults"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.SetDefaults](elem)))
      case (Some("SetDefaultValues"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.SetDefaultValues](elem)))
      case (Some("Load"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Load](elem)))
      case (Some("LoadIfExists"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.LoadIfExists](elem)))
      case (Some("LoadAsText"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.LoadAsText](elem)))
      case (Some("Remove"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Remove](elem)))
      case (Some("GetPkList"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetPkList](elem)))
      case (Some("Write"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Write](elem)))
      case (Some("WriteCollection"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.WriteCollection](elem)))
      case (Some("DeleteCollection"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.DeleteCollection](elem)))
      case (Some("ImportCollection"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ImportCollection](elem)))
      case (Some("GetImages"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetImages](elem)))
      case (Some("GetEntityIfMoreRecent"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetEntityIfMoreRecent](elem)))
      case (Some("GetDirtyCacheEntities"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetDirtyCacheEntities](elem)))
      case (Some("GetActiveApplicationMenus"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetActiveApplicationMenus](elem)))
      case (Some("GetDefaultEntity"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetDefaultEntity](elem)))
      case (Some("Logon"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Logon](elem)))
      case (Some("BearerTokenLogon"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.BearerTokenLogon](elem)))
      case (Some("GetUserInfo"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetUserInfo](elem)))
      case (Some("Logoff"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Logoff](elem)))
      case (Some("KillSession"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.KillSession](elem)))
      case (Some("TestCnx"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.TestCnx](elem)))
      case (Some("ChangePassword"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ChangePassword](elem)))
      case (Some("GetServerTime"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetServerTime](elem)))
      case (Some("ServerShutdown"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.ServerShutdown](elem)))
      case (Some("GetOption"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetOption](elem)))
      case (Some("GetNewIds"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetNewIds](elem)))
      case (Some("GetNewIdsEx"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetNewIdsEx](elem)))
      case (Some("GetCnxInfo"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.GetCnxInfo](elem)))
      case (Some("FormatDataPolicy"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.FormatDataPolicy](elem)))
      case (Some("Encrypt"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Encrypt](elem)))
      case (Some("EncryptServerPassword"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.EncryptServerPassword](elem)))
      case (Some("HashPassword"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.HashPassword](elem)))
      case (Some("Diff"), Some("urn:xtk:session") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Diff](elem)))
      case (Some("createCollectionResponse"), Some("urn:vva:VV2_NOVOS_ENTRANTES") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.CreateCollectionResponse](elem)))
      case (Some("createResponse"), Some("urn:vva:VV2_NOVOS_ENTRANTES") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.CreateResponse](elem)))
      case (Some("create"), Some("urn:vva:VV2_NOVOS_ENTRANTES") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.Create](elem)))
      case (Some("createCollection"), Some("urn:vva:VV2_NOVOS_ENTRANTES") | None) => Some(DataRecord(ns, key, xsns, xstype, fromXML[wsdlconsumer.CreateCollection](elem)))

      case _ => None
    }
  }

  trait DefaultWsdlconsumer_ElementTypeFormat extends scalaxb.ElemNameParser[wsdlconsumer.ElementType] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    override def typeName: Option[String] = Some("Element")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.ElementType] =
      phrase((any(_ => true)) ^^
      { case p1 =>
      wsdlconsumer.ElementType(scalaxb.fromXML[scalaxb.DataRecord[Any]](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.ElementType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.any) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get)

  }

  trait DefaultWsdlconsumer_NewInstanceFormat extends scalaxb.ElemNameParser[wsdlconsumer.NewInstance] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.NewInstance] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.NewInstance(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.NewInstance, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false))

  }

  trait DefaultWsdlconsumer_DuplicateFormat extends scalaxb.ElemNameParser[wsdlconsumer.Duplicate] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Duplicate] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pkPk")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.Duplicate(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Duplicate, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false),
        scalaxb.toXML[String](__obj.pkPk, Some("urn:xtk:session"), Some("pkPk"), __scope, false))

  }

  trait DefaultWsdlconsumer_DuplicateWithMappingIdFormat extends scalaxb.ElemNameParser[wsdlconsumer.DuplicateWithMappingId] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.DuplicateWithMappingId] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pkPk")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.DuplicateWithMappingId(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.DuplicateWithMappingId, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false),
        scalaxb.toXML[String](__obj.pkPk, Some("urn:xtk:session"), Some("pkPk"), __scope, false))

  }

  trait DefaultWsdlconsumer_DuplicateToFormat extends scalaxb.ElemNameParser[wsdlconsumer.DuplicateTo] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.DuplicateTo] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pkPk")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pkFolder")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      wsdlconsumer.DuplicateTo(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.DuplicateTo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false),
        scalaxb.toXML[String](__obj.pkPk, Some("urn:xtk:session"), Some("pkPk"), __scope, false),
        scalaxb.toXML[String](__obj.pkFolder, Some("urn:xtk:session"), Some("pkFolder"), __scope, false))

  }

  trait DefaultWsdlconsumer_ApplyDuplicateRulesFormat extends scalaxb.ElemNameParser[wsdlconsumer.ApplyDuplicateRules] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.ApplyDuplicateRules] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.ApplyDuplicateRules(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.ApplyDuplicateRules, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false))

  }

  trait DefaultWsdlconsumer_SetDefaultsFormat extends scalaxb.ElemNameParser[wsdlconsumer.SetDefaults] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.SetDefaults] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.SetDefaults(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.SetDefaults, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false))

  }

  trait DefaultWsdlconsumer_SetDefaultValuesFormat extends scalaxb.ElemNameParser[wsdlconsumer.SetDefaultValues] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.SetDefaultValues] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strXpath")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.SetDefaultValues(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.SetDefaultValues, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false),
        scalaxb.toXML[String](__obj.strXpath, Some("urn:xtk:session"), Some("strXpath"), __scope, false))

  }

  trait DefaultWsdlconsumer_LoadFormat extends scalaxb.ElemNameParser[wsdlconsumer.Load] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Load] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pkPk")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.Load(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Load, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false),
        scalaxb.toXML[String](__obj.pkPk, Some("urn:xtk:session"), Some("pkPk"), __scope, false))

  }

  trait DefaultWsdlconsumer_LoadIfExistsFormat extends scalaxb.ElemNameParser[wsdlconsumer.LoadIfExists] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.LoadIfExists] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pkPk")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.LoadIfExists(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.LoadIfExists, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false),
        scalaxb.toXML[String](__obj.pkPk, Some("urn:xtk:session"), Some("pkPk"), __scope, false))

  }

  trait DefaultWsdlconsumer_LoadAsTextFormat extends scalaxb.ElemNameParser[wsdlconsumer.LoadAsText] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.LoadAsText] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pkPk")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.LoadAsText(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.LoadAsText, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.pkPk, Some("urn:xtk:session"), Some("pkPk"), __scope, false))

  }

  trait DefaultWsdlconsumer_LoadAsTextResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.LoadAsTextResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.LoadAsTextResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrContent")) ^^
      { case p1 =>
      wsdlconsumer.LoadAsTextResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.LoadAsTextResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.pstrContent, Some("urn:xtk:session"), Some("pstrContent"), __scope, false))

  }

  trait DefaultWsdlconsumer_RemoveFormat extends scalaxb.ElemNameParser[wsdlconsumer.Remove] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Remove] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.Remove(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Remove, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetPkListFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetPkList] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetPkList] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "entity")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.GetPkList(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetPkList, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.entity, Some("urn:xtk:session"), Some("entity"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetPkListResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetPkListResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetPkListResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "ppklPkList")) ^^
      { case p1 =>
      wsdlconsumer.GetPkListResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetPkListResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.ppklPkList, Some("urn:xtk:session"), Some("ppklPkList"), __scope, false))

  }

  trait DefaultWsdlconsumer_WriteFormat extends scalaxb.ElemNameParser[wsdlconsumer.Write] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Write] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "domDoc")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.Write(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Write, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.domDoc, Some("urn:xtk:session"), Some("domDoc"), __scope, false))

  }

  trait DefaultWsdlconsumer_WriteResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.WriteResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.WriteResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.WriteResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.WriteResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.WriteResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_WriteCollectionFormat extends scalaxb.ElemNameParser[wsdlconsumer.WriteCollection] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.WriteCollection] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "domDoc")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.WriteCollection(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.WriteCollection, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.domDoc, Some("urn:xtk:session"), Some("domDoc"), __scope, false))

  }

  trait DefaultWsdlconsumer_WriteCollectionResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.WriteCollectionResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.WriteCollectionResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.WriteCollectionResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.WriteCollectionResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.WriteCollectionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_DeleteCollectionFormat extends scalaxb.ElemNameParser[wsdlconsumer.DeleteCollection] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.DeleteCollection] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strSchema")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "elemWhere")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "bIgnoreDeleteStatus")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      wsdlconsumer.DeleteCollection(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.DeleteCollection, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strSchema, Some("urn:xtk:session"), Some("strSchema"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.elemWhere, Some("urn:xtk:session"), Some("elemWhere"), __scope, false),
        scalaxb.toXML[Boolean](__obj.bIgnoreDeleteStatus, Some("urn:xtk:session"), Some("bIgnoreDeleteStatus"), __scope, false))

  }

  trait DefaultWsdlconsumer_DeleteCollectionResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.DeleteCollectionResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.DeleteCollectionResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.DeleteCollectionResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.DeleteCollectionResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.DeleteCollectionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_ImportCollectionFormat extends scalaxb.ElemNameParser[wsdlconsumer.ImportCollection] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.ImportCollection] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "domDoc")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.ImportCollection(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.ImportCollection, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.domDoc, Some("urn:xtk:session"), Some("domDoc"), __scope, false))

  }

  trait DefaultWsdlconsumer_ImportCollectionResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.ImportCollectionResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.ImportCollectionResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.ImportCollectionResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.ImportCollectionResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.ImportCollectionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_GetImagesFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetImages] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetImages] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strPkList")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.GetImages(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetImages, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strPkList, Some("urn:xtk:session"), Some("strPkList"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetImagesResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetImagesResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetImagesResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pdomDoc")) ^^
      { case p1 =>
      wsdlconsumer.GetImagesResponse(scalaxb.fromXML[wsdlconsumer.ElementType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetImagesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[wsdlconsumer.ElementType](__obj.pdomDoc, Some("urn:xtk:session"), Some("pdomDoc"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetEntityIfMoreRecentFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetEntityIfMoreRecent] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetEntityIfMoreRecent] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strPk")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strMd5")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "bMustExist")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      wsdlconsumer.GetEntityIfMoreRecent(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Boolean](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetEntityIfMoreRecent, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strPk, Some("urn:xtk:session"), Some("strPk"), __scope, false),
        scalaxb.toXML[String](__obj.strMd5, Some("urn:xtk:session"), Some("strMd5"), __scope, false),
        scalaxb.toXML[Boolean](__obj.bMustExist, Some("urn:xtk:session"), Some("bMustExist"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetEntityIfMoreRecentResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetEntityIfMoreRecentResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetEntityIfMoreRecentResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pdomDoc")) ^^
      { case p1 =>
      wsdlconsumer.GetEntityIfMoreRecentResponse(scalaxb.fromXML[wsdlconsumer.ElementType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetEntityIfMoreRecentResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[wsdlconsumer.ElementType](__obj.pdomDoc, Some("urn:xtk:session"), Some("pdomDoc"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetDirtyCacheEntitiesFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetDirtyCacheEntities] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetDirtyCacheEntities] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "domCacheEntities")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.GetDirtyCacheEntities(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetDirtyCacheEntities, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.domCacheEntities, Some("urn:xtk:session"), Some("domCacheEntities"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetDirtyCacheEntitiesResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetDirtyCacheEntitiesResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetDirtyCacheEntitiesResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pdomDirtyEntities")) ^^
      { case p1 =>
      wsdlconsumer.GetDirtyCacheEntitiesResponse(scalaxb.fromXML[wsdlconsumer.ElementType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetDirtyCacheEntitiesResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[wsdlconsumer.ElementType](__obj.pdomDirtyEntities, Some("urn:xtk:session"), Some("pdomDirtyEntities"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetActiveApplicationMenusFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetActiveApplicationMenus] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetActiveApplicationMenus] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ^^
      { case p1 =>
      wsdlconsumer.GetActiveApplicationMenus(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetActiveApplicationMenus, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetActiveApplicationMenusResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetActiveApplicationMenusResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetActiveApplicationMenusResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pdomDoc")) ^^
      { case p1 =>
      wsdlconsumer.GetActiveApplicationMenusResponse(scalaxb.fromXML[wsdlconsumer.ElementType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetActiveApplicationMenusResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[wsdlconsumer.ElementType](__obj.pdomDoc, Some("urn:xtk:session"), Some("pdomDoc"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetDefaultEntityFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetDefaultEntity] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetDefaultEntity] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strSchema")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.GetDefaultEntity(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetDefaultEntity, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strSchema, Some("urn:xtk:session"), Some("strSchema"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetDefaultEntityResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetDefaultEntityResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetDefaultEntityResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pdomDoc")) ^^
      { case p1 =>
      wsdlconsumer.GetDefaultEntityResponse(scalaxb.fromXML[wsdlconsumer.ElementType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetDefaultEntityResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[wsdlconsumer.ElementType](__obj.pdomDoc, Some("urn:xtk:session"), Some("pdomDoc"), __scope, false))

  }

  trait DefaultWsdlconsumer_LogonFormat extends scalaxb.ElemNameParser[wsdlconsumer.Logon] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Logon] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strLogin")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strPassword")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "elemParameters")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 =>
      wsdlconsumer.Logon(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p4, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Logon, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strLogin, Some("urn:xtk:session"), Some("strLogin"), __scope, false),
        scalaxb.toXML[String](__obj.strPassword, Some("urn:xtk:session"), Some("strPassword"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.elemParameters, Some("urn:xtk:session"), Some("elemParameters"), __scope, false))

  }

  trait DefaultWsdlconsumer_LogonResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.LogonResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.LogonResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrSessionToken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pSessionInfo")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pstrSecurityToken")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.LogonResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.LogonResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.pstrSessionToken, Some("urn:xtk:session"), Some("pstrSessionToken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.pSessionInfo, Some("urn:xtk:session"), Some("pSessionInfo"), __scope, false),
        scalaxb.toXML[String](__obj.pstrSecurityToken, Some("urn:xtk:session"), Some("pstrSecurityToken"), __scope, false))

  }

  trait DefaultWsdlconsumer_BearerTokenLogonFormat extends scalaxb.ElemNameParser[wsdlconsumer.BearerTokenLogon] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.BearerTokenLogon] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strBearerToken")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.BearerTokenLogon(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.BearerTokenLogon, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strBearerToken, Some("urn:xtk:session"), Some("strBearerToken"), __scope, false))

  }

  trait DefaultWsdlconsumer_BearerTokenLogonResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.BearerTokenLogonResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.BearerTokenLogonResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrSessionToken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pSessionInfo")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pstrSecurityToken")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.BearerTokenLogonResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdlconsumer.ElementType](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.BearerTokenLogonResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.pstrSessionToken, Some("urn:xtk:session"), Some("pstrSessionToken"), __scope, false),
        scalaxb.toXML[wsdlconsumer.ElementType](__obj.pSessionInfo, Some("urn:xtk:session"), Some("pSessionInfo"), __scope, false),
        scalaxb.toXML[String](__obj.pstrSecurityToken, Some("urn:xtk:session"), Some("pstrSecurityToken"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetUserInfoFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetUserInfo] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetUserInfo] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ^^
      { case p1 =>
      wsdlconsumer.GetUserInfo(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetUserInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetUserInfoResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetUserInfoResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetUserInfoResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pUserInfo")) ^^
      { case p1 =>
      wsdlconsumer.GetUserInfoResponse(scalaxb.fromXML[wsdlconsumer.ElementType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetUserInfoResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[wsdlconsumer.ElementType](__obj.pUserInfo, Some("urn:xtk:session"), Some("pUserInfo"), __scope, false))

  }

  trait DefaultWsdlconsumer_LogoffFormat extends scalaxb.ElemNameParser[wsdlconsumer.Logoff] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Logoff] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ^^
      { case p1 =>
      wsdlconsumer.Logoff(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Logoff, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false))

  }

  trait DefaultWsdlconsumer_LogoffResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.LogoffResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.LogoffResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.LogoffResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.LogoffResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.LogoffResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_KillSessionFormat extends scalaxb.ElemNameParser[wsdlconsumer.KillSession] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.KillSession] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strId")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.KillSession(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.KillSession, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strId, Some("urn:xtk:session"), Some("strId"), __scope, false))

  }

  trait DefaultWsdlconsumer_KillSessionResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.KillSessionResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.KillSessionResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.KillSessionResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.KillSessionResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.KillSessionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_TestCnxFormat extends scalaxb.ElemNameParser[wsdlconsumer.TestCnx] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.TestCnx] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ^^
      { case p1 =>
      wsdlconsumer.TestCnx(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.TestCnx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false))

  }

  trait DefaultWsdlconsumer_TestCnxResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.TestCnxResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.TestCnxResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.TestCnxResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.TestCnxResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.TestCnxResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_ChangePasswordFormat extends scalaxb.ElemNameParser[wsdlconsumer.ChangePassword] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.ChangePassword] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strOldPassword")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strNewPassword")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.ChangePassword(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.ChangePassword, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strOldPassword, Some("urn:xtk:session"), Some("strOldPassword"), __scope, false),
        scalaxb.toXML[String](__obj.strNewPassword, Some("urn:xtk:session"), Some("strNewPassword"), __scope, false))

  }

  trait DefaultWsdlconsumer_ChangePasswordResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.ChangePasswordResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.ChangePasswordResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.ChangePasswordResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.ChangePasswordResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.ChangePasswordResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_GetServerTimeFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetServerTime] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetServerTime] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ^^
      { case p1 =>
      wsdlconsumer.GetServerTime(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetServerTime, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetServerTimeResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetServerTimeResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetServerTimeResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "ptmServerTime")) ^^
      { case p1 =>
      wsdlconsumer.GetServerTimeResponse(p1.nilOption map { scalaxb.fromXML[javax.xml.datatype.XMLGregorianCalendar](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetServerTimeResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[Option[javax.xml.datatype.XMLGregorianCalendar]](__obj.ptmServerTime, Some("urn:xtk:session"), Some("ptmServerTime"), __scope, false))

  }

  trait DefaultWsdlconsumer_ServerShutdownFormat extends scalaxb.ElemNameParser[wsdlconsumer.ServerShutdown] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.ServerShutdown] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ^^
      { case p1 =>
      wsdlconsumer.ServerShutdown(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.ServerShutdown, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false))

  }

  trait DefaultWsdlconsumer_ServerShutdownResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.ServerShutdownResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.ServerShutdownResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.ServerShutdownResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.ServerShutdownResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.ServerShutdownResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }

  trait DefaultWsdlconsumer_GetOptionFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetOption] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetOption] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strName")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.GetOption(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetOption, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strName, Some("urn:xtk:session"), Some("strName"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetOptionResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetOptionResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetOptionResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrValue")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pbtType")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.GetOptionResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Byte](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetOptionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.pstrValue, Some("urn:xtk:session"), Some("pstrValue"), __scope, false),
        scalaxb.toXML[Byte](__obj.pbtType, Some("urn:xtk:session"), Some("pbtType"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetNewIdsFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetNewIds] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetNewIds] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "lCount")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.GetNewIds(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetNewIds, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[Int](__obj.lCount, Some("urn:xtk:session"), Some("lCount"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetNewIdsResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetNewIdsResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetNewIdsResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrIdList")) ^^
      { case p1 =>
      wsdlconsumer.GetNewIdsResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetNewIdsResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.pstrIdList, Some("urn:xtk:session"), Some("pstrIdList"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetNewIdsExFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetNewIdsEx] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetNewIdsEx] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "lCount")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strSequence")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.GetNewIdsEx(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[Int](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetNewIdsEx, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[Int](__obj.lCount, Some("urn:xtk:session"), Some("lCount"), __scope, false),
        scalaxb.toXML[String](__obj.strSequence, Some("urn:xtk:session"), Some("strSequence"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetNewIdsExResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetNewIdsExResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetNewIdsExResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrIdList")) ^^
      { case p1 =>
      wsdlconsumer.GetNewIdsExResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetNewIdsExResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.pstrIdList, Some("urn:xtk:session"), Some("pstrIdList"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetCnxInfoFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetCnxInfo] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetCnxInfo] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ^^
      { case p1 =>
      wsdlconsumer.GetCnxInfo(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetCnxInfo, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false))

  }

  trait DefaultWsdlconsumer_GetCnxInfoResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.GetCnxInfoResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.GetCnxInfoResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pdomCnxInfo")) ^^
      { case p1 =>
      wsdlconsumer.GetCnxInfoResponse(scalaxb.fromXML[wsdlconsumer.ElementType](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.GetCnxInfoResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[wsdlconsumer.ElementType](__obj.pdomCnxInfo, Some("urn:xtk:session"), Some("pdomCnxInfo"), __scope, false))

  }

  trait DefaultWsdlconsumer_FormatDataPolicyFormat extends scalaxb.ElemNameParser[wsdlconsumer.FormatDataPolicy] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.FormatDataPolicy] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strDataPolicy")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strValue")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdlconsumer.FormatDataPolicy(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.FormatDataPolicy, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strDataPolicy, Some("urn:xtk:session"), Some("strDataPolicy"), __scope, false),
        scalaxb.toXML[String](__obj.strValue, Some("urn:xtk:session"), Some("strValue"), __scope, false))

  }

  trait DefaultWsdlconsumer_FormatDataPolicyResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.FormatDataPolicyResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.FormatDataPolicyResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrResult")) ^^
      { case p1 =>
      wsdlconsumer.FormatDataPolicyResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.FormatDataPolicyResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.pstrResult, Some("urn:xtk:session"), Some("pstrResult"), __scope, false))

  }

  trait DefaultWsdlconsumer_EncryptFormat extends scalaxb.ElemNameParser[wsdlconsumer.Encrypt] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Encrypt] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strDecrypted")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.Encrypt(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Encrypt, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strDecrypted, Some("urn:xtk:session"), Some("strDecrypted"), __scope, false))

  }

  trait DefaultWsdlconsumer_EncryptResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.EncryptResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.EncryptResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrEncrypted")) ^^
      { case p1 =>
      wsdlconsumer.EncryptResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.EncryptResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.pstrEncrypted, Some("urn:xtk:session"), Some("pstrEncrypted"), __scope, false))

  }

  trait DefaultWsdlconsumer_EncryptServerPasswordFormat extends scalaxb.ElemNameParser[wsdlconsumer.EncryptServerPassword] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.EncryptServerPassword] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strDecrypted")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.EncryptServerPassword(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.EncryptServerPassword, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strDecrypted, Some("urn:xtk:session"), Some("strDecrypted"), __scope, false))

  }

  trait DefaultWsdlconsumer_EncryptServerPasswordResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.EncryptServerPasswordResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.EncryptServerPasswordResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrEncrypted")) ^^
      { case p1 =>
      wsdlconsumer.EncryptServerPasswordResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.EncryptServerPasswordResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.pstrEncrypted, Some("urn:xtk:session"), Some("pstrEncrypted"), __scope, false))

  }

  trait DefaultWsdlconsumer_HashPasswordFormat extends scalaxb.ElemNameParser[wsdlconsumer.HashPassword] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.HashPassword] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "strDecrypted")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.HashPassword(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.HashPassword, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.strDecrypted, Some("urn:xtk:session"), Some("strDecrypted"), __scope, false))

  }

  trait DefaultWsdlconsumer_HashPasswordResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.HashPasswordResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.HashPasswordResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrEncrypted")) ^^
      { case p1 =>
      wsdlconsumer.HashPasswordResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.HashPasswordResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.pstrEncrypted, Some("urn:xtk:session"), Some("pstrEncrypted"), __scope, false))

  }

  trait DefaultWsdlconsumer_DiffFormat extends scalaxb.ElemNameParser[wsdlconsumer.Diff] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Diff] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pkPk")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.Diff(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Diff, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:xtk:session"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.pkPk, Some("urn:xtk:session"), Some("pkPk"), __scope, false))

  }

  trait DefaultWsdlconsumer_DiffResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.DiffResponse] {
    val targetNamespace: Option[String] = Some("urn:xtk:session")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.DiffResponse] =
      phrase((scalaxb.ElemName(Some("urn:xtk:session"), "pstrOriginal")) ~ 
      (scalaxb.ElemName(Some("urn:xtk:session"), "pstrCurrent")) ^^
      { case p1 ~ p2 =>
      wsdlconsumer.DiffResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.DiffResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.pstrOriginal, Some("urn:xtk:session"), Some("pstrOriginal"), __scope, false),
        scalaxb.toXML[String](__obj.pstrCurrent, Some("urn:xtk:session"), Some("pstrCurrent"), __scope, false))

  }


  trait SessionMethodsSoapBindings { this: scalaxb.Soap11ClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("urn:xtk:session")
    lazy val service: wsdlconsumer.SessionMethodsSoap = new SessionMethodsSoapBinding {}
    def baseAddress = new java.net.URI("https://cnova-mkt-stage1.campaign.adobe.com/nl/jsp/soaprouter.jsp")

    trait SessionMethodsSoapBinding extends wsdlconsumer.SessionMethodsSoap {
      import scalaxb.ElemName._
      def newInstance(sessiontoken: String, entity: wsdlconsumer.ElementType): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.NewInstance(sessiontoken, entity), Some("urn:xtk:session"), "NewInstance", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#NewInstance"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "NewInstanceResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def duplicate(sessiontoken: String, entity: wsdlconsumer.ElementType, pkPk: String): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Duplicate(sessiontoken, entity, pkPk), Some("urn:xtk:session"), "Duplicate", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#Duplicate"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "DuplicateResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def duplicateWithMappingId(sessiontoken: String, entity: wsdlconsumer.ElementType, pkPk: String): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.DuplicateWithMappingId(sessiontoken, entity, pkPk), Some("urn:xtk:session"), "DuplicateWithMappingId", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#DuplicateWithMappingId"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "DuplicateWithMappingIdResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def duplicateTo(sessiontoken: String, entity: wsdlconsumer.ElementType, pkPk: String, pkFolder: String): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.DuplicateTo(sessiontoken, entity, pkPk, pkFolder), Some("urn:xtk:session"), "DuplicateTo", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#DuplicateTo"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "DuplicateToResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def applyDuplicateRules(sessiontoken: String, entity: wsdlconsumer.ElementType): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.ApplyDuplicateRules(sessiontoken, entity), Some("urn:xtk:session"), "ApplyDuplicateRules", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#ApplyDuplicateRules"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ApplyDuplicateRulesResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def setDefaults(sessiontoken: String, entity: wsdlconsumer.ElementType): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.SetDefaults(sessiontoken, entity), Some("urn:xtk:session"), "SetDefaults", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#SetDefaults"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "SetDefaultsResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def setDefaultValues(sessiontoken: String, entity: wsdlconsumer.ElementType, strXpath: String): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.SetDefaultValues(sessiontoken, entity, strXpath), Some("urn:xtk:session"), "SetDefaultValues", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#SetDefaultValues"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "SetDefaultValuesResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def load(sessiontoken: String, entity: wsdlconsumer.ElementType, pkPk: String): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Load(sessiontoken, entity, pkPk), Some("urn:xtk:session"), "Load", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#Load"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoadResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def loadIfExists(sessiontoken: String, entity: wsdlconsumer.ElementType, pkPk: String): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.LoadIfExists(sessiontoken, entity, pkPk), Some("urn:xtk:session"), "LoadIfExists", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#LoadIfExists"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoadIfExistsResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def loadAsText(sessiontoken: String, pkPk: String): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.LoadAsText(sessiontoken, pkPk), Some("urn:xtk:session"), "LoadAsText", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#LoadAsText"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.LoadAsTextResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LoadAsTextResponse").head, Nil).pstrContent }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def remove(sessiontoken: String, entity: String): Future[scalaxb.DataRecord[Any]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Remove(sessiontoken, entity), Some("urn:xtk:session"), "Remove", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#Remove"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ElementType](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "RemoveResponse").head, Nil).any }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getPkList(sessiontoken: String, entity: String): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetPkList(sessiontoken, entity), Some("urn:xtk:session"), "GetPkList", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#GetPkList"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetPkListResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetPkListResponse").head, Nil).ppklPkList }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def write(sessiontoken: String, domDoc: wsdlconsumer.ElementType): Future[wsdlconsumer.WriteResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Write(sessiontoken, domDoc), Some("urn:xtk:session"), "Write", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#Write"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.WriteResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "WriteResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def writeCollection(sessiontoken: String, domDoc: wsdlconsumer.ElementType): Future[wsdlconsumer.WriteCollectionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.WriteCollection(sessiontoken, domDoc), Some("urn:xtk:session"), "WriteCollection", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#WriteCollection"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.WriteCollectionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "WriteCollectionResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def deleteCollection(sessiontoken: String, strSchema: String, elemWhere: wsdlconsumer.ElementType, bIgnoreDeleteStatus: Boolean): Future[wsdlconsumer.DeleteCollectionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.DeleteCollection(sessiontoken, strSchema, elemWhere, bIgnoreDeleteStatus), Some("urn:xtk:session"), "DeleteCollection", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#DeleteCollection"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.DeleteCollectionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "DeleteCollectionResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def importCollection(sessiontoken: String, domDoc: wsdlconsumer.ElementType): Future[wsdlconsumer.ImportCollectionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.ImportCollection(sessiontoken, domDoc), Some("urn:xtk:session"), "ImportCollection", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#ImportCollection"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ImportCollectionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ImportCollectionResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getImages(sessiontoken: String, strPkList: String): Future[wsdlconsumer.ElementType] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetImages(sessiontoken, strPkList), Some("urn:xtk:session"), "GetImages", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#GetImages"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetImagesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetImagesResponse").head, Nil).pdomDoc }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getEntityIfMoreRecent(sessiontoken: String, strPk: String, strMd5: String, bMustExist: Boolean): Future[wsdlconsumer.ElementType] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetEntityIfMoreRecent(sessiontoken, strPk, strMd5, bMustExist), Some("urn:xtk:session"), "GetEntityIfMoreRecent", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#GetEntityIfMoreRecent"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetEntityIfMoreRecentResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetEntityIfMoreRecentResponse").head, Nil).pdomDoc }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getDirtyCacheEntities(sessiontoken: String, domCacheEntities: wsdlconsumer.ElementType): Future[wsdlconsumer.ElementType] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetDirtyCacheEntities(sessiontoken, domCacheEntities), Some("urn:xtk:session"), "GetDirtyCacheEntities", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#GetDirtyCacheEntities"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetDirtyCacheEntitiesResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetDirtyCacheEntitiesResponse").head, Nil).pdomDirtyEntities }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getActiveApplicationMenus(sessiontoken: String): Future[wsdlconsumer.ElementType] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetActiveApplicationMenus(sessiontoken), Some("urn:xtk:session"), "GetActiveApplicationMenus", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#GetActiveApplicationMenus"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetActiveApplicationMenusResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetActiveApplicationMenusResponse").head, Nil).pdomDoc }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getDefaultEntity(sessiontoken: String, strSchema: String): Future[wsdlconsumer.ElementType] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetDefaultEntity(sessiontoken, strSchema), Some("urn:xtk:session"), "GetDefaultEntity", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:persist#GetDefaultEntity"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetDefaultEntityResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetDefaultEntityResponse").head, Nil).pdomDoc }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def logon(sessiontoken: String, strLogin: String, strPassword: String, elemParameters: wsdlconsumer.ElementType): Future[wsdlconsumer.LogonResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Logon(sessiontoken, strLogin, strPassword, elemParameters), Some("urn:xtk:session"), "Logon", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#Logon"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.LogonResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LogonResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def bearerTokenLogon(sessiontoken: String, strBearerToken: String): Future[wsdlconsumer.BearerTokenLogonResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.BearerTokenLogon(sessiontoken, strBearerToken), Some("urn:xtk:session"), "BearerTokenLogon", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#BearerTokenLogon"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.BearerTokenLogonResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "BearerTokenLogonResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getUserInfo(sessiontoken: String): Future[wsdlconsumer.ElementType] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetUserInfo(sessiontoken), Some("urn:xtk:session"), "GetUserInfo", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#GetUserInfo"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetUserInfoResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetUserInfoResponse").head, Nil).pUserInfo }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def logoff(sessiontoken: String): Future[wsdlconsumer.LogoffResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Logoff(sessiontoken), Some("urn:xtk:session"), "Logoff", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#Logoff"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.LogoffResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "LogoffResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def killSession(sessiontoken: String, strId: String): Future[wsdlconsumer.KillSessionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.KillSession(sessiontoken, strId), Some("urn:xtk:session"), "KillSession", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#KillSession"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.KillSessionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "KillSessionResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def testCnx(sessiontoken: String): Future[wsdlconsumer.TestCnxResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.TestCnx(sessiontoken), Some("urn:xtk:session"), "TestCnx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#TestCnx"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.TestCnxResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "TestCnxResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def changePassword(sessiontoken: String, strOldPassword: String, strNewPassword: String): Future[wsdlconsumer.ChangePasswordResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.ChangePassword(sessiontoken, strOldPassword, strNewPassword), Some("urn:xtk:session"), "ChangePassword", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#ChangePassword"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ChangePasswordResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ChangePasswordResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getServerTime(sessiontoken: String): Future[Option[javax.xml.datatype.XMLGregorianCalendar]] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetServerTime(sessiontoken), Some("urn:xtk:session"), "GetServerTime", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#GetServerTime"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetServerTimeResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetServerTimeResponse").head, Nil).ptmServerTime }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def serverShutdown(sessiontoken: String): Future[wsdlconsumer.ServerShutdownResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.ServerShutdown(sessiontoken), Some("urn:xtk:session"), "ServerShutdown", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#ServerShutdown"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.ServerShutdownResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "ServerShutdownResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getOption(sessiontoken: String, strName: String): Future[wsdlconsumer.GetOptionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetOption(sessiontoken, strName), Some("urn:xtk:session"), "GetOption", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#GetOption"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetOptionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetOptionResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getNewIds(sessiontoken: String, lCount: Int): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetNewIds(sessiontoken, lCount), Some("urn:xtk:session"), "GetNewIds", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#GetNewIds"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetNewIdsResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetNewIdsResponse").head, Nil).pstrIdList }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getNewIdsEx(sessiontoken: String, lCount: Int, strSequence: String): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetNewIdsEx(sessiontoken, lCount, strSequence), Some("urn:xtk:session"), "GetNewIdsEx", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#GetNewIdsEx"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetNewIdsExResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetNewIdsExResponse").head, Nil).pstrIdList }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def getCnxInfo(sessiontoken: String): Future[wsdlconsumer.ElementType] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.GetCnxInfo(sessiontoken), Some("urn:xtk:session"), "GetCnxInfo", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#GetCnxInfo"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.GetCnxInfoResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "GetCnxInfoResponse").head, Nil).pdomCnxInfo }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def formatDataPolicy(sessiontoken: String, strDataPolicy: String, strValue: String): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.FormatDataPolicy(sessiontoken, strDataPolicy, strValue), Some("urn:xtk:session"), "FormatDataPolicy", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#FormatDataPolicy"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.FormatDataPolicyResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "FormatDataPolicyResponse").head, Nil).pstrResult }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def encrypt(sessiontoken: String, strDecrypted: String): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Encrypt(sessiontoken, strDecrypted), Some("urn:xtk:session"), "Encrypt", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#Encrypt"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.EncryptResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "EncryptResponse").head, Nil).pstrEncrypted }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def encryptServerPassword(sessiontoken: String, strDecrypted: String): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.EncryptServerPassword(sessiontoken, strDecrypted), Some("urn:xtk:session"), "EncryptServerPassword", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#EncryptServerPassword"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.EncryptServerPasswordResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "EncryptServerPasswordResponse").head, Nil).pstrEncrypted }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def hashPassword(sessiontoken: String, strDecrypted: String): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.HashPassword(sessiontoken, strDecrypted), Some("urn:xtk:session"), "HashPassword", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#HashPassword"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.HashPasswordResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "HashPasswordResponse").head, Nil).pstrEncrypted }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def diff(sessiontoken: String, pkPk: String): Future[wsdlconsumer.DiffResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Diff(sessiontoken, pkPk), Some("urn:xtk:session"), "Diff", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("xtk:session#Diff"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.DiffResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "DiffResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
    }
  }


  trait DefaultWsdlconsumer_ElementFormat extends scalaxb.ElemNameParser[wsdlconsumer.Element] {
    val targetNamespace: Option[String] = Some("urn:vva:VV2_NOVOS_ENTRANTES")
    
    override def typeName: Option[String] = Some("Element")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Element] =
      phrase((any(_ => true)) ^^
      { case p1 =>
      wsdlconsumer.Element(scalaxb.fromXML[scalaxb.DataRecord[Any]](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Element, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      ((Some(__obj.any) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true)}).get)

  }

  trait DefaultWsdlconsumer_CreateFormat extends scalaxb.ElemNameParser[wsdlconsumer.Create] {
    val targetNamespace: Option[String] = Some("urn:vva:VV2_NOVOS_ENTRANTES")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.Create] =
      phrase((scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "sessiontoken")) ~ 
      (scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "bandeira")) ~ 
      (scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "cpf_hash")) ~ 
      (scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "origem")) ~ 
      (scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "email")) ~ 
      (scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "telefone_celular")) ~ 
      (scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "opt_in_email")) ~ 
      (scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "opt_in_sms")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 ~ p7 ~ p8 =>
      wsdlconsumer.Create(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p2, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p3, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p4, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p5, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p6, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p7, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[String](p8, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.Create, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(scalaxb.toXML[String](__obj.sessiontoken, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("sessiontoken"), __scope, false),
        scalaxb.toXML[String](__obj.bandeira, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("bandeira"), __scope, false),
        scalaxb.toXML[String](__obj.cpf_hash, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("cpf_hash"), __scope, false),
        scalaxb.toXML[String](__obj.origem, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("origem"), __scope, false),
        scalaxb.toXML[String](__obj.email, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("email"), __scope, false),
        scalaxb.toXML[String](__obj.telefone_celular, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("telefone_celular"), __scope, false),
        scalaxb.toXML[String](__obj.opt_in_email, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("opt_in_email"), __scope, false),
        scalaxb.toXML[String](__obj.opt_in_sms, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("opt_in_sms"), __scope, false))

  }

  trait DefaultWsdlconsumer_CreateResponseFormat extends scalaxb.ElemNameParser[wsdlconsumer.CreateResponse] {
    val targetNamespace: Option[String] = Some("urn:vva:VV2_NOVOS_ENTRANTES")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.CreateResponse] =
      phrase((scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "bandeira")) ^^
      { case p1 =>
      wsdlconsumer.CreateResponse(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.CreateResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.bandeira, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("bandeira"), __scope, false))

  }

  trait DefaultWsdlconsumer_CreateCollectionFormat extends scalaxb.ElemNameParser[wsdlconsumer.CreateCollection] {
    val targetNamespace: Option[String] = Some("urn:vva:VV2_NOVOS_ENTRANTES")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdlconsumer.CreateCollection] =
      phrase((scalaxb.ElemName(Some("urn:vva:VV2_NOVOS_ENTRANTES"), "sessiontoken")) ^^
      { case p1 =>
      wsdlconsumer.CreateCollection(scalaxb.fromXML[String](p1, scalaxb.ElemName(node) :: stack)) })
    
    def writesChildNodes(__obj: wsdlconsumer.CreateCollection, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (scalaxb.toXML[String](__obj.sessiontoken, Some("urn:vva:VV2_NOVOS_ENTRANTES"), Some("sessiontoken"), __scope, false))

  }

  trait DefaultWsdlconsumer_CreateCollectionResponseFormat extends scalaxb.XMLFormat[wsdlconsumer.CreateCollectionResponse] with scalaxb.CanWriteChildNodes[wsdlconsumer.CreateCollectionResponse] {
    val targetNamespace: Option[String] = Some("urn:vva:VV2_NOVOS_ENTRANTES")
    import scalaxb.ElemName._
    
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdlconsumer.CreateCollectionResponse] = seq match {
      case node: scala.xml.Node => Right(wsdlconsumer.CreateCollectionResponse())
      case _ => Left("reads failed: seq must be scala.xml.Node")
    }
    
    def writesChildNodes(__obj: wsdlconsumer.CreateCollectionResponse, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Nil


  }


  trait VV2_NOVOS_ENTRANTESMethodsSoapBindings { this: scalaxb.Soap11ClientsAsync =>
    lazy val targetNamespace: Option[String] = Some("urn:vva:VV2_NOVOS_ENTRANTES")
    lazy val service: wsdlconsumer.VV2_NOVOS_ENTRANTESMethodsSoap = new VV2_NOVOS_ENTRANTESMethodsSoapBinding {}
    def baseAddress = new java.net.URI("https://cnova-mkt-stage1.campaign.adobe.com/nl/jsp/soaprouter.jsp")

    trait VV2_NOVOS_ENTRANTESMethodsSoapBinding extends wsdlconsumer.VV2_NOVOS_ENTRANTESMethodsSoap {
      import scalaxb.ElemName._
      def create(sessiontoken: String, bandeira: String, cpf_hash: String, origem: String, email: String, telefone_celular: String, opt_in_email: String, opt_in_sms: String): Future[String] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.Create(sessiontoken, bandeira, cpf_hash, origem, email, telefone_celular, opt_in_email, opt_in_sms), Some("urn:vva:VV2_NOVOS_ENTRANTES"), "create", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("vva:VV2_NOVOS_ENTRANTES#create"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.CreateResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createResponse").head, Nil).bandeira }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
      def createCollection(sessiontoken: String): Future[wsdlconsumer.CreateCollectionResponse] = 
        soapClient.requestResponse(scalaxb.toXML(wsdlconsumer.CreateCollection(sessiontoken), Some("urn:vva:VV2_NOVOS_ENTRANTES"), "createCollection", defaultScope),
            Nil, defaultScope, baseAddress, "POST", Some(new java.net.URI("vva:VV2_NOVOS_ENTRANTES#createCollection"))).transform({ case (header, body) => 
            scalaxb.fromXML[wsdlconsumer.CreateCollectionResponse](({
              scala.xml.Elem(null, "Body", scala.xml.Null, defaultScope, true, body.toSeq: _*)
            } \ "createCollectionResponse").head, Nil) }, {
              case x: scalaxb.Soap11Fault[_] => x
              case x => x
            })
    }
  }



}

